---
- name: Create
  hosts: localhost
  gather_facts: false
  vars:
    molecule_inventory:
      all:
        hosts: {}
        molecule: {}
  tasks:
    - name: Copy Containerfile from image names
      ansible.builtin.template:
        src: "{{ molecule_scenario_directory }}/Containerfile.j2"
        dest: "{{ molecule_ephemeral_directory }}/Containerfile_{{ item.image | regex_replace('[^a-zA-Z0-9_]', '_') }}.j2"
        mode: preserve
      with_items: "{{ molecule_yml.platforms }}"
      register: platforms

    - name: Copy requirements into the podman build dir
      ansible.builtin.template:
        src: "{{ lookup('env', 'MOLECULE_PROJECT_DIRECTORY') }}/requirements.txt"
        dest: "{{ molecule_ephemeral_directory }}/requirements.txt"
        mode: preserve
      with_items: "{{ molecule_yml.platforms }}"
      register: platforms

    - name: Build image from Containerfile
      containers.podman.podman_image:
        path: "{{ molecule_ephemeral_directory }}"
        name: "molecule_local/{{ item.item.image }}"
        build:
          file: "{{ item.item.containerfile | default(item.invocation.module_args.dest) }}"
          format: "docker"
          extra_args:
            --build-arg DEV_BRANCH="{{ (lookup('env', 'DEV_BRANCH')) }}"
        force: "{{ item.item.force | default(True) }}"
      with_items: "{{ platforms.results }}"
      # when: platforms.changed

    - name: Create molecule instance(s) (Run container)
      containers.podman.podman_container:
        name: "{{ item.name }}"
        hostname: "{{ item.name }}"
        image: "molecule_local/{{ item.image }}"
        state: started
        recreate: false
        log_driver: json-file
        secrets:
          - CDO_API_KEY,type=env
        env:
          CDO_REGION: "{{ (lookup('env', 'CDO_REGION')) }}"
        command: "{{ item.command | default('sleep infinity') }}"
        privileged: "{{ item.privileged | default(omit) }}"
        volumes: "{{ item.volumes | default(omit) }}"
        capabilities: "{{ item.capabilities | default(omit) }}"
      register: result
      loop: "{{ molecule_yml.platforms }}"

    - name: Print some info
      ansible.builtin.debug:
        msg: "{{ result.results }}"

    - name: Fail if container is not running
      when: >
        item.container.State.ExitCode != 0 or
        not item.container.State.Running
      ansible.builtin.include_tasks:
        file: "{{ molecule_scenario_directory }}/tasks/create-fail.yml"
      loop: "{{ result.results }}"
      loop_control:
        label: "{{ item.container.Name }}"

    - name: Add container to molecule_inventory
      vars:
        inventory_partial_yaml: |
          all:
            children:
              molecule:
                hosts:
                  "{{ item.name }}":
                    ansible_connection: podman
      ansible.builtin.set_fact:
        molecule_inventory: >
          {{ molecule_inventory | combine(inventory_partial_yaml | from_yaml, recursive=true) }}
      loop: "{{ molecule_yml.platforms }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Check molecule inventory
      ansible.builtin.debug:
        msg: "molecule_inventory: {{ molecule_inventory }}"

    - name: Dump molecule_inventory
      ansible.builtin.copy:
        content: |
          {{ molecule_inventory | to_yaml }}
        dest: "{{ molecule_ephemeral_directory }}/inventory/molecule_inventory.yml"
        mode: "0600"

    - name: Force inventory refresh
      ansible.builtin.meta: refresh_inventory

    - name: Fail if molecule group is missing
      ansible.builtin.assert:
        that: "'molecule' in groups"
        fail_msg: |
          molecule group was not found inside inventory groups: {{ groups }}
      run_once: true # noqa: run-once[task]
